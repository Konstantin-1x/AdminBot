package org.example.tgProcessing;

import org.example.telegramBots.TelegramBot;
import org.example.dao.PeopleDAO;
import org.example.dao.TariffDAO;
import org.example.table.People;
import org.example.table.Tariff;
import org.example.telegramBots.TelegramBotLogs;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;

public class LogicUI {

    public void sendStart(long chatId,Update update) {
        Sent sent = new Sent();
        TelegramBot TelegramBot = new TelegramBot();
        TelegramBotLogs telegramBotLogs = new TelegramBotLogs();
        PeopleDAO peopleDAO = new PeopleDAO();

        People people = peopleDAO.findById(chatId);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞");
        row1.add("–¢–∞—Ä–∏—Ñ—ã");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ú–µ–Ω—é");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        SendMessage sendMessage = new SendMessage();

        sendMessage.setReplyMarkup(keyboardMarkup);
        if(people==null){
            people = new People();
            people.setTgId(chatId);
            people.setMarketing(true);
            people.setActive(true);
            people.setSubscriptionTime("0");
            people.setAdmin(false);
            people.setUsername(update.getMessage().getFrom().getUserName());
            people.setFirstName(update.getMessage().getFrom().getFirstName());
            people.setUser_flag(true);

            sent.sendMessageStart(people, people.getFirstName() + ", –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç WB –±–æ—Ç –ø–æ–¥–ø–∏—Å–æ–∫", sendMessage);
            List<Long> messageIdAndGroup = telegramBotLogs.createTopic(update);

            people.setGroupID(messageIdAndGroup.get(0));
            people.setId_message(Math.toIntExact(messageIdAndGroup.get(1)));

            peopleDAO.save(people);
        }else{
            sent.sendMessage(people,people.getFirstName() + ", —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", sendMessage);
        }
    }

    public void sendSubscription(People people) {
        Sent sent = new Sent();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞");
        row1.add("–¢–∞—Ä–∏—Ñ—ã");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ú–µ–Ω—é");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setReplyMarkup(keyboardMarkup);

        sent.sendMessage(people,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ü–æ–¥–ø–∏—Å–∫–∏",sendMessage);
    }

    public void sendMenu(People people) {
        Sent sent = new Sent();
        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ");
        row1.add("–ü–æ–¥–ø–∏—Å–∫–∏");

        KeyboardRow row2 = new KeyboardRow();
        if(people.isMarketing() && (!people.isAdmin() || people.isUser_flag())){
            row2.add("–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É");
        }else if(!people.isAdmin() || people.isUser_flag()){
            row2.add("–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É");
        }
        if(people.isAdmin()){
            row2.add("–ê–¥–º–∏–Ω –º–µ–Ω—é");
        }

        row2.add("–ß—Ç–æ-—Ç–æ");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setKeyboard(List.of(row1,row2));
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        SendMessage sendMessage = new SendMessage();
        sendMessage.setReplyMarkup(keyboardMarkup);

        sent.sendMessage(people,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ú–µ–Ω—é",sendMessage);
    }
    public void sendAdminMenu(People people){
        Sent sent = new Sent();
        if(people.isAdmin()){
            KeyboardRow row1 = new KeyboardRow();
            row1.add("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞");

            KeyboardRow row2 = new KeyboardRow();
            row2.add("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É");
            row2.add("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É");
            if(people.isUser_flag()){
                row2.add("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                row1.add("–¢–∞—Ä–∏—Ñ—ã");
            }else {
                row2.add("–ê–¥–º–∏–Ω");
                row1.add("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã");
            }
            row1.add("–ú–µ–Ω—é");
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setKeyboard(List.of(row1,row2));
            keyboardMarkup.setResizeKeyboard(true);
            keyboardMarkup.setOneTimeKeyboard(false);

            SendMessage sendMessage = new SendMessage();
            sendMessage.setReplyMarkup(keyboardMarkup);

            sent.sendMessage(people,"–ê–¥–º–∏–Ω –ú–µ–Ω—é", sendMessage);
        }else sendMenu(people);
    }
    public void sendTariff(People people) {
        Sent sent = new Sent();
        TariffDAO tariffDAO = new TariffDAO();

        List<Tariff> tariffs;
        if(people.isAdmin() && people.isUser_flag()){
            tariffs = tariffDAO.findAllVisible();
        } else{
            tariffs = tariffDAO.findAll();
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Tariff tariff : tariffs) {
            InlineKeyboardButton button = new InlineKeyboardButton();

            BigDecimal discount = tariff.getDiscount().multiply(BigDecimal.valueOf(0.01));
            BigDecimal discountedPrice = tariff.getPrice().subtract(tariff.getPrice().multiply(discount));
            BigDecimal formattedPrice = discountedPrice.setScale(1, RoundingMode.HALF_UP);

            button.setText(tariff.getName() + " - " + formattedPrice + " ‚ÇΩ");

            button.setCallbackData("tariff_" + tariff.getId());

            rows.add(List.of(button));
        }
        if(people.isAdmin() && !people.isUser_flag()){
            InlineKeyboardButton addTariff = new InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ");
            addTariff.setCallbackData("addTariff_");
            rows.add(List.of(addTariff));
        }


        InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        back.setCallbackData("–ü–æ–¥–ø–∏—Å–∫–∏");

        rows.add(List.of(back));

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setReplyMarkup(markup);
        sent.sendMessage(people,"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", message);
    }
    public void sentOneTariff(People people, Tariff selected){
        Sent sent = new Sent();
        String sentText = "<b> –¢–∞—Ä–∏—Ñ: " + selected.getName() + "</b>\n" +
                "<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> " + selected.getDescription() + "\n" +
                "<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: <code>" + (selected.getPrice().subtract(selected.getPrice().multiply(selected.getDiscount().multiply(BigDecimal.valueOf(0.01))))) + "‚ÇΩ</code>\n" +
                "<b>–°—Ä–æ–∫:</b> " + selected.getTerm() + " —Å—É—Ç–æ–∫";
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

        InlineKeyboardButton back = new InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥");
        back.setCallbackData("tariffs");

        if(!people.isUser_flag() && people.isAdmin()){

            sentText += "\n<b>–°–∫–∏–¥–∫–∞:</b> " + selected.getDiscount() + "%";

            InlineKeyboardButton name = new InlineKeyboardButton("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ");
            name.setCallbackData("update_tariffs_name_" + selected.getId());

            InlineKeyboardButton description = new InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ");
            description.setCallbackData("update_tariffs_description_" + selected.getId());

            InlineKeyboardButton price = new InlineKeyboardButton("–°—Ç–æ–∏–º–æ—Å—Ç—å");
            price.setCallbackData("update_tariffs_price_" + selected.getId());

            InlineKeyboardButton term = new InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
            term.setCallbackData("update_tariffs_term_" + selected.getId());

            InlineKeyboardButton discount = new InlineKeyboardButton("–°–∫–∏–¥–∫–∞");
            discount.setCallbackData("update_tariffs_discount_" + selected.getId());

            InlineKeyboardButton visible;
            if(selected.isVisible()){
                visible = new InlineKeyboardButton("–í–∏–¥–∏–º ‚úÖ");
            }else{
                visible = new InlineKeyboardButton("–ù–µ–≤–∏–¥–∏–º Ô∏è‚ö†Ô∏è");
            }
            visible.setCallbackData("changeVisible_" + selected.getId());

            markup.setKeyboard(List.of(
                    List.of(name),
                    List.of(description),
                    List.of(price),
                    List.of(term),
                    List.of(discount),
                    List.of(visible),
                    List.of(back)
            ));
        } else {
            InlineKeyboardButton buy = new InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å");
            buy.setCallbackData("buy_tariffs_" + selected.getId());

            markup.setKeyboard(List.of(
                    List.of(buy),
                    List.of(back)
            ));
        }

        SendMessage message = new SendMessage();
        message.setReplyMarkup(markup);
        sent.sendMessage(people,sentText,message);
    }
}
